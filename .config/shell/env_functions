# Usage: indirect_expand VARIABLE_NAME
# Expands the value of the specified environment variable indirectly.
# Example: indirect_expand PATH
indirect_expand() {
    env | sed -n "s/^$1=//p"
}

# Usage: pathremove /path/to/bin [VARIABLE_NAME]
# Removes the specified directory from the given PATH variable (default is PATH).
# Example: pathremove ~/bin PATH
pathremove() {
    local IFS=':'
    local newpath
    local dir
    local var=${2:-PATH}
    # Bash has ${!var}, but this is not portable.
    for dir in `indirect_expand "$var"`; do
        IFS=''
        if [ "$dir" != "$1" ]; then
            newpath=$newpath:$dir
        fi
    done
    export $var=${newpath#:}
}

# Usage: pathprepend /path/to/bin [VARIABLE_NAME]
# Prepends the specified directory to the given PATH variable (default is PATH).
# Example: pathprepend ~/bin PATH
pathprepend() {
    # Remove the path if it already exists to move it to the front
    pathremove "$1" "$2"
    # [ -d "${1}" ] || return
    local var="${2:-PATH}"
    local value=`indirect_expand "$var"`
    export ${var}="${1}${value:+:${value}}"
}

# Usage: pathappend /path/to/bin [VARIABLE_NAME]
# Appends the specified directory to the given PATH variable (default is PATH).
# Example: pathappend ~/bin PATH
pathappend() {
    pathremove "${1}" "${2}"
    #[ -d "${1}" ] || return
    local var=${2:-PATH}
    local value=`indirect_expand "$var"`
    export $var="${value:+${value}:}${1}"
}

# Usage: ssource filename
# Sources the specified file if it is readable.
# Example: ssource myscript.sh
ssource() {
    if [ -r "$1" ]; then
        . "$1"
    fi
}

# Usage: mkcd directory_name
# Creates a directory and changes into it.
# Example: mkcd new_folder
mkcd() {
    mkdir -p "$1"
    cd "$1"
}

# Usage: remorphans
# Uninstalls all orphaned packages (packages no longer required as dependencies).
remorphans() {
    local packages=()

    for package in $(pacman -Qdtq); do
        packages+=("$package")
    done

    echo "Found ${#packages[*]} orphans."
    if ! [[ ${#packages[*]} -eq 0 ]]; then
        sudo pacman -Rns "${packages[@]}"
    fi
}

# Usage: lf [options]
# Launches the lf file manager and returns to the last visited directory after exit.
lf() {
    \umask 077
    tmp="$(command mktemp)"
    command lf -last-dir-path="$tmp" "$@"
    if [ -f "$tmp" ]; then
        dir="$(command cat "$tmp")"
        command rm -f "$tmp"
    else
        \return 1
    fi
    if [ -d "$dir" ] && [ "$dir" != "$(pwd)" ]; then
        \cd "$dir" || \return 1
    fi
}

### FZF functions

# Usage: locatefall
# Uses fzf to locate a file in the current directory and changes into it if it's a directory, or opens it in the editor if it's a file.
fall() {
    local file
    dir="$(pwd)"
    file=$(locate "${dir}/" 2>/dev/null | fzf +m) && if [ -d "$file" ]; then cd "$file"; else ${EDITOR:-vim} "$file"; fi
}


# Usage: fe
# Finds and edits a file in the current directory, excluding certain paths and file types.
fe() {
    local file

    file="$( find . \
        -type f \
        -not \( \
            -path "*/.git*" -o \
            -path "*/.cache*" -o \
            -path "*/.cargo*" -o \
            -path "*/.yarn*" -o \
            -path "*/chromium*" -o \
            -path "*/.svn*" -o \
            -path "*.png" -o \
            -path "*.mp4" -o \
            -path "*.mp3" -o \
            -path "*.jpg" -o \
            -path "*.jpeg" -o \
            -path "*.bin" -o \
            -path "*.svg" -o \
            -path "*.gz" -o \
            -path "*.tar" -o \
            -path "*.tgz" -o \
            -path "*.zip" \
        \) \
        ! -size 0 \
        -print 2> /dev/null | fzf +m)" &&
    ${EDITOR:-vim} "$file"
}

# Usage: fcd
# Changes to a directory selected via fzf, excluding certain paths.
fcd() {
    local dir
    dir=$(find . \
        -not \( -path "*/.*" -prune \) \
            -not \( -path "*/Library/*" -prune \) \
            -not \( -path "*/Applications/*" -prune \) \
            -not \( -ipath "*/cache/*" -prune \) \
        -type d -print 2> /dev/null | fzf +m) &&
    cd "$dir"
}

# Usage: fkill [signal]
# Kills processes selected via fzf. Default signal is SIGKILL (9).
fkill() {
    ps -ef | sed 1d | fzf -m | awk '{print $2}' | xargs kill -${1:-9}
}

# Usage: fps
# Displays currently running processes using fzf for selection.
fps() {
    ps aux | sed 1d | fzf -m
}

# Usage: fh
# Searches command history using fzf and executes the selected command.
fhist() {
    local selected_cmd
    selected_cmd=$(history | awk '{$1=""; sub(/^[ \t]*[0-9-]+ [0-9:]+[ \t]*/, ""); print}' | fzf +s --tac)
    if [[ -n "$selected_cmd" ]]; then
        echo "$selected_cmd"
        eval "$selected_cmd"
    fi
}


# vim:ft=sh
