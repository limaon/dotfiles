# vim:ft=conf

set shell bash
set shellopts '-eu'
set ifs "\n"
set info size:time
set sortby natural
set noreverse
set dircounts
set period 1
set autoquit true
set ratios 3:2
set scrolloff 5
set drawbox
set icons
set ignorecase
set incfilter
set incsearch
set tabstop 2
set wrapscroll
set truncatechar "…"
set cleaner "~/.config/lf/exec_cleaner"
set previewer "~/.config/lf/exec_previewer"
set hiddenfiles ".*:*.aux:*.log:*.bbl:*.bcf:*.blg:*.run.xml"
set timefmt "02/01/2006 15:04:05 "
set infotimefmtnew '02/01 15:04'
set infotimefmtold '02/01/06'
set errorfmt "\033[1;31m"
set numberfmt "\033[38;2;75;87;116m"
set rulerfmt 'df:acc:progress:selection:filter:ind'
set cursorpreviewfmt "\033[7m"

# Functions
cmd cfg_reload source ~/.config/lf/lfrc

cmd open ${{
  case "${f##*.}" in
    kdenlive) setsid -f kdenlive "$f" >/dev/null 2>&1 ; exit ;;
  esac

  case $({ [ -L "$f" ] && f="$(readlink -f "$f")" ;} ; file --mime-type -b "$f") in
    image/vnd.djvu) setsid -f zathura "$f" > /dev/null 2>&1 ;;
    video/*) setsid -f mpv "$f" >/dev/null 2>&1 ;;
    audio/*) setsid -f mpv --player-operation-mode=pseudo-gui "$f" ;;
    image/x-xcf) setsid -f gimp "$f" ;;
    image/*) imgs="$(echo "$fx" | tr "\n" "'" | sed "s/'/' '/g" | sed "s/^/'/g" | sed "s/' '$/'/g")" ; eval "setsid -f nsxiv -a $imgs >/dev/null 2>&1" ;;
    application/octet-stream) setsid -f gpg -dq "$f" ;;
    text/*) echo "$fx" | tr "\n" '"' | sed 's/"/" "/g' | sed 's/^/"/g' | sed 's/" "$/"/g' | xargs $EDITOR ;;
    text/*|application/json) echo "$fx" | tr "\n" '|' | sed -e 's/|$/"/g' -e 's/|/|-c "tabe /g' -e 's/|-c/" -c/g' -e 's/^/"/' | xargs $EDITOR ;;
    #application/pdf) setsid -f zathura "$f" > /dev/null 2>&1 ;;
    application/pdf) echo "$fx" | while read -r l ; do setsid -f xdg-open "$l" ; done ;;
    application/epub+zip) setsid -f zathura "$f" > /dev/null 2>&1 ;;
    application/x-mobipocket-ebook) setsid -f ebook-viewer "$f" > /dev/null 2>&1 ;;
    inode/symlink) setsid -f xdg-open "$(readlink "$f")" ;;
    application/zip) setsid -f xarchiver "$f" >/dev/null 2>&1 ;;
    application/x-7z-compressed) setsid -f xarchiver "$f" >/dev/null 2>&1 ;;
    application/x-rar) setsid -f xarchiver "$f" >/dev/null 2>&1 ;;
    application/gzip) setsid -f xarchiver "$f" > /dev/null 2>&1 ;;
    application/vnd.oasis.opendocument.spreadsheet) setsid -f libreoffice "$f" ;;
    application/vnd.openxmlformats-officedocument.wordprocessingml.document) setsid -f libreoffice "$f" ;;
    inode/x-empty) $EDITOR "$f" ;;
    *) for f in "$fx" ; do setsid -f xdg-open "$f" >/dev/null 2>&1 ; done ;;
    *) setsid -f xdg-open "$f" >/dev/null 2>&1 ;;
  esac
}}


cmd on-cd %{{
  case "$(basename -- "$PWD")" in
    Downloads|Screenshots)
      lf -remote "send $id set sortby time"
      lf -remote "send $id set reverse"
      ;;
    *)
      lf -remote "send $id set sortby natural"
      lf -remote "send $id set noreverse"
      ;;
  esac
}}


cmd changedirectory ${{
  set -f
  MBASE="/run/media/$(id -un)"
  clear; tput cup $(($(tput lines)/3)); tput bold
  printf 'Go to where?\n'

  dirpath="$(find "$HOME" "$MBASE" -maxdepth 4 -type d 2>/dev/null \
              | fzf --layout=reverse --height 40% --prompt 'Go to where? ')"

  [[ -n "$dirpath" ]] && lf -remote "send $id cd \"$dirpath\""
}}


cmd hard-reload &{{
  [ -d ~/.cache/lf ] && rm -rf ~/.cache/lf
  lf -remote "send $id reload"
}}

cmd yank &{{
  case ${1} in
    dir)  dirname "${f}" ;;
    name) basename "${f}" ;;
    path) printf "%s" "${f}" ;;
  esac | xclip -rmlastnl -selection clipboard
}}

# Colocar aqui uma mensagem que terminou a transferencia
cmd paste &{{
  set -- $(cat ~/.local/share/lf/files)
  mode="$1"
  shift
  case "$mode" in
    copy)
      rsync -aAXHv --info=progress2 --update --no-compress \
            --partial --human-readable \
            -- "$@" . |
      stdbuf -i0 -o0 -e0 tr '\r' '\n' |
      while IFS= read -r line; do
        lf -remote "send $id echo $line"
      done
      ;;
    move)
      mv -n -- "$@" .
      ;;
  esac
  rm ~/.local/share/lf/files
  lf -remote "send clear"
  lf -remote "send reload"
}}

cmd copyto ${{
  set -f
  MBASE="/run/media/$(id -un)"
  clear; tput cup $(($(tput lines)/3))

  dest="$(find "$HOME" "$MBASE" -maxdepth 4 -type d 2>/dev/null \
         | fzf --layout=reverse --height 40% --prompt 'Copy to where? ')"

  [[ -z "$dest" || ! -d "$dest" ]] && exit 1

  clear; tput cup $(($(tput lines)/3)); tput bold
  echo "From:"; printf '%s\n' $fx | sed 's/^/   /'
  printf 'To:\n   %s\n\n\tcopy?[y/N]' "$dest"
  read -r ans
  [[ "$ans" != "y" ]] && exit 1

  for x in $fx; do
    rsync -aAXHv --info=progress2 --update --no-compress --partial -h \
          --chmod=Du=rwx,Dg=rx,Do=rx,Fu=rw,Fg=r,Fo=r \
          -- "$x" "$dest"
  done &&
  notify-send "󰆏  File(s) copied." "File(s) copied to $dest."
  lf -remote 'send clear'
}}


cmd moveto ${{
  set -f
  MBASE="/run/media/$(id -un)"
  clear; tput cup $(($(tput lines)/3))

  dest="$(find "$HOME" "$MBASE" -maxdepth 4 -type d 2>/dev/null \
         | fzf --layout=reverse --height 40% --prompt 'Move to where? ')"

  [[ -z "$dest" || ! -d "$dest" ]] && exit 1

  clear; tput cup $(($(tput lines)/3)); tput bold
  echo "From:"; printf '%s\n' $fx | sed 's/^/   /'
  printf 'To:\n   %s\n\n\tmove?[y/N]' "$dest"
  read -r ans
  [[ "$ans" != "y" ]] && exit 1

  for x in $fx; do
    mv -iv -- "$x" "$dest"
  done &&
  notify-send "  File(s) moved." "File(s) moved to $dest."
  lf -remote 'send clear'
}}


# Delete / Trash
# ------------------
cmd delete ${{
    clear; tput cup $(($(tput lines)/3)); tput bold
    set -f
    printf "%s\n\t" "$fx"
    printf "Permenantly delete?[y/N]"
    read ans
    if [ $ans = "y" ] && rm -rf -- $fx; then
    notify-send "  File(s) deleted." "$fx"
  fi
}}

cmd trash ${{
  files=$(printf "$fx" | tr '\n' ';')
  while [ "$files" ]; do
    file=${files%%;*}

    gio trash "$(basename "$file")"
    if [ "$files" = "$file" ]; then
      files=''
    else
      files="${files#*;}"
    fi
  done
}}

cmd clear_trash %gio trash --empty

cmd restore_trash ${{
  gio trash --restore -- "trash:///$(basename -- "$f")"
}}

# Extract / Tar / Zip
# -----------------------
cmd extract ${{
  set -f
  clear; tput cup $(($(tput lines)/3)); tput bold
  printf '%s\n' "$fx"
  printf 'extract to own folder(s)? [y/N] '
  read -r ans
  [[ "$ans" != "y" ]] && exit 0

  for x in $fx; do
    base="${x##*/}"
    dest="${base%.*}"
    mkdir -p -- "$dest" || continue
    bsdtar -xf "$x" -C "$dest"
    find "$dest" -type f -exec chmod -x -- {} +
  done
  notify-send "󰏖  Extracted." "Unpacked to individual folders."
  lf -remote 'send reload'
}}

cmd tar ${{
  clear; tput cup $(($(tput lines)/3)); tput bold
  printf "Archive Name: "
  read archive_name
  set -f
  tar -czvf "${archive_name}.tar.gz" -C "$(dirname "$f")" $(basename -a $fx)
}}

cmd zip-files ${{
  printf "Enter zip archive name: "
  read name
  unset files
  echo "$fx" | while read -r l ; do { file="$(echo "$l" | rev | cut -d '/' -f 1 | rev)" ; zip -r "$name" "$file" ;} ; done
  clear
}}

cmd touch-file ${{
  clear; tput cup $(($(tput lines)/3)); tput bold
  printf "File name: "
  read name
  touch "$name"
  clear
}}

cmd mkdir ${{
  clear; tput cup $(($(tput lines)/3)); tput bold
  set -f
  printf "%s\n\t" "$fx"
  printf "Folder name: "
  read newd
  mkdir -- "$newd"
  # mv -- $fx "$newd"
}}

cmd fzf_jump ${{
  res="$(find . 2>/dev/null -maxdepth 6 | fzf --bind tab:down,shift-tab:up --reverse --header='Jump to location')"
  if [ -f "$res" ]; then
    cmd="select"
  elif [ -d "$res" ]; then
    cmd="cd"
  fi
  lf -remote "send $id $cmd \"$res\""
}}

# | Permissions (chmod/chown) |
# -----------------------------
cmd chmod ${{
  clear; tput cup $(($(tput lines)/3)); tput bold
  set -f
  printf "%s\n\t" "$fx"
  printf "chmod: "
  read ans

  for file in "$fx"; do
    chmod $ans $file
  done

  lf -remote 'send reload'
  lf -remote 'send clear'
}}

cmd chown ${{
  clear; tput cup $(($(tput lines)/3)); tput bold
  set -f
  printf "%s\n\t" "$fx"
  printf "chown: "
  read ans

  for file in "$fx"; do
    sudo chown $ans $file
  done

  lf -remote 'send reload'
  lf -remote 'send clear'
}}

cmd file-type ${{
  file -i "$f" ; read a
  clear
}}

cmd bulk-rename ${{
  old="$(mktemp)"
  new="$(mktemp)"
  if [ -n "$fs" ]; then
    fs="$(basename -a $fs)"
  else
    fs="$(ls)"
  fi
  printf '%s\n' "$fs" >"$old"
  printf '%s\n' "$fs" >"$new"
  $EDITOR "$new"
  [ "$(wc -l < "$new")" -ne "$(wc -l < "$old")" ] && exit
  paste "$old" "$new" | while IFS= read -r names; do
  src="$(printf '%s' "$names" | cut -f1)"
  dst="$(printf '%s' "$names" | cut -f2)"
  if [ "$src" = "$dst" ] || [ -e "$dst" ]; then
    continue
  fi
  mv -- "$src" "$dst"
  done
  rm -- "$old" "$new"
  lf -remote "send $id unselect"
}}

cmd stop ${{
  kill -TSTP $(ps -p $$ -o 'ppid=')
}}


cmd ud-unmount ${{
    if udiskie-umount -aef; then
        lf -remote "send $id echomsg >> The device was umounted <<"
    else
        lf -remote "send $id echoerr >> udiskie-umount failed <<"
    fi
}}

cmd setbg ${{
  case "$(file --mime-type -Lb "$f")" in
    image/*)  setsid -f setbg "$f" >/dev/null 2>&1 ;;
    *)        lf -remote "send $id echoerr «not an image»" ;;
  esac
}}


# Key maps
#---------

map m
map "'"
map '"'
map t
map c
map r
map w
map o

# Search
map f
map ff find
map fb find-back
map fF :fzf_jump

#General maps
map Km maps  # List normal mode mappings
map Kc cmaps  # List command mode mappings
map cd changedirectory
map mf touch-file
map md mkdir
map R :redraw; reload; recol; cfg_reload
map r :redraw; reload; clear;
map <esc> :redraw; reload; clear;
map <c-r> hard-reload
map zp set preview!
map zd set dirfirst!
map sn :set sortby natural; set reverse!; set info size
map se :set sortby ext; set reverse!; set info size
map w setbg
map W $setsid -f $TERM >/dev/null 2>&1
# map V glob-select *
# map U glob-unselect *

# Archive Mappins
map xz zip-files
map xt tar
map xx extract

# Delete files
map d
map dd cut
map df moveto
map dD delete
map <delete> delete
map dt trash
map dc clear_trash
map dr restore_trash

map p
map p paste

map chmod chmod
map chown chown

# Copy
map y
map yy copy
map yf copyto
map yp yank path
map yn yank name
map yd yank dir
map Y file-type

# Rename
map <f-2> rename
map A rename
map i push A<c-u>
map I push A<c-a>
map a push A<a-b>
map B bulk-rename

# Some movements
map { half-up
map } half-down
map <enter> open

# Movement dirs
map g/ cd /
map gM cd /mnt
map ge cd /etc
map gP cd /tmp
map gU cd /usr
map gd cd ~/Desktop
map gD cd ~/Downloads
map gp cd ~/Pictures
map gm cd ~/Music
map gV cd ~/Videos
map gC cd ~/.config
map gL cd ~/.local
map gr $lf -remote "send $id cd /run/media/$(id -un)"
map gtr cd ~/.local/share/Trash/files
map gb cd /usr/share/backgrounds
map gu ud-unmount
